{"version":3,"sources":["components/Table.module.css","components/TableCell.tsx","components/TableRow.tsx","components/Table.tsx","App.tsx","utils/customHooks.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TableCell","props","useState","nameActive","setNameActive","rowName","cellName","setCellName","inputRef","useRef","useEffect","console","log","current","click","onClick","onBlur","changeRow","id","dataAttr","data-column","autoFocus","value","onChange","e","currentTarget","type","isColor","ref","TableRow","name","color","deleteRow","Table","table","tableRows","map","tr","key","className","styles","data","App","initialValue","storage","localStorage","storageValue","getItem","setItem","JSON","stringify","parse","err","state","setState","serializedState","useStorage","setTable","rowId","filter","row","dataName","dataValue","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4b6d654e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__3M_gK\"};","import React, {ChangeEvent, useEffect, useRef, useState} from \"react\";\n\ntype PropsType = {\n    id: number\n    rowName: string\n    changeRow: (id: number, dataName: string, dataValue: string) => void\n    isColor?: boolean\n    dataAttr: string\n};\n\nexport const TableCell = (props: PropsType) => {\n    const [nameActive, setNameActive] = useState(false);\n    const [cellName, setCellName] = useState(props.rowName);\n    const inputRef = useRef<HTMLInputElement | null>(null);\n\n    useEffect(() => {\n        if (nameActive) {\n            console.log(inputRef.current);\n            inputRef.current?.click();\n        }\n    }, [nameActive]);\n\n    const onNameActiveClick = () => setNameActive(true);\n    const onNameInActiveClick = () => {\n        setNameActive(false);\n        debugger\n        props.changeRow(props.id, props.dataAttr, cellName);\n    };\n\n    const onChangeRow = (e: ChangeEvent<HTMLInputElement>) => setCellName(e.currentTarget.value);\n\n    return (\n        <td\n            onClick={onNameActiveClick}\n            onBlur={onNameInActiveClick}\n            data-column={props.dataAttr}\n        >\n            {\n                nameActive\n                    ?\n                    <input\n                        autoFocus\n                        value={cellName}\n                        onChange={onChangeRow}\n                        type={props.isColor ? 'color' : 'text'}\n                        ref={inputRef}\n                    />\n                    : <span>{cellName}</span>\n            }\n        </td>\n    );\n};","import React from \"react\";\nimport {TableCell} from \"./TableCell\";\n\ntype PropsType = {\n    id: number\n    name: string\n    type: string\n    color: string\n    deleteRow: (id: number) => void\n    changeRow: (id: number, dataName: string, dataValue: string) => void\n};\n\nexport const TableRow = ({id, name, type, color, deleteRow, changeRow}: PropsType) => {\n    const onDeleteRow = () => deleteRow(id);\n\n    return (\n        <>\n            <tr>\n                <td data-column={'id'}>{id}</td>\n                <TableCell id={id} rowName={name} changeRow={changeRow} dataAttr={'name'}/>\n                <TableCell id={id} rowName={type} changeRow={changeRow} dataAttr={'type'}/>\n                <TableCell id={id} rowName={color} isColor changeRow={changeRow} dataAttr={'color'}/>\n                <td data-column={'delete'}>\n                    <button onClick={onDeleteRow}>X</button>\n                </td>\n            </tr>\n        </>\n    );\n};","import React from \"react\";\nimport {TableRow} from \"./TableRow\";\nimport {TableRowsType} from \"../utils/types\";\nimport styles from './Table.module.css';\n\ntype PropsType = {\n    table: Array<TableRowsType>\n    deleteRow: (id: number) => void\n    changeRow: (id: number, dataName: string, dataValue: string) => void\n};\n\nexport const Table = ({table, deleteRow, changeRow}: PropsType) => {\n    const tableRows = table.map(tr =>\n        <TableRow\n            id={tr.id}\n            name={tr.name}\n            type={tr.type}\n            color={tr.color}\n            deleteRow={deleteRow}\n            changeRow={changeRow}\n            key={tr.id}\n        />\n    );\n\n    return (\n        <>\n            <table className={styles.table}>\n                <thead>\n                    <tr>\n                        <th>id</th>\n                        <th>name</th>\n                        <th>type</th>\n                        <th>color</th>\n                        <th>delete</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tableRows}\n                </tbody>\n            </table>\n        </>\n    );\n};","import React from 'react';\nimport './App.css';\nimport {Table} from \"./components/Table\";\nimport {useStorage} from \"./utils/customHooks\";\nimport {TableRowsType} from \"./utils/types\";\n\nconst data = [\n    {id: 2, name: 'name2', type: 'main2', color: '#cccccc'},\n    {id: 1, name: 'name1', type: 'main', color: '#f4f4f4'},\n    {id: 3, name: 'name3', type: 'main3', color: '#000000'},\n];\n\nconst App = () => {\n    const [table, setTable] = useStorage('table', data);\n\n    const addRowHandler = () => setTable([...table, {\n        id: table.length + 1,\n        name: 'name3',\n        type: 'main3',\n        color: '#000000'\n    }]);\n\n    const deleteRowHandler = (rowId: number) => {\n        setTable(table.filter((row: TableRowsType) => row.id !== rowId));\n    };\n\n    const changeRowHandler = (id: number, dataName: string, dataValue: string) => {\n        setTable(table.map((tr: TableRowsType) => {\n            if (tr.id === id) {\n                debugger\n                return {...tr, [dataName]: dataValue}\n            }\n\n            return tr;\n        }));\n    };\n\n    return (\n        <div className=\"App\">\n            <Table\n                table={table}\n                deleteRow={deleteRowHandler}\n                changeRow={changeRowHandler}\n            />\n            <button onClick={addRowHandler}>Add</button>\n        </div>\n    );\n}\n\nexport default App;","import {useEffect, useState} from 'react';\n\nexport const useStorage = (key: string, initialValue: any, storage = localStorage) => {\n    const [state, setState] = useState(() => {\n        try {\n            const storageValue = storage.getItem(key);\n\n            if (typeof storageValue !== 'string') {\n                storage.setItem(key, JSON.stringify(initialValue));\n                return initialValue;\n            }\n\n            return JSON.parse(storageValue || 'null');\n        } catch (err) {\n            console.log(err);\n            return initialValue;\n        }\n    });\n\n    useEffect(() => {\n        try {\n            const serializedState = JSON.stringify(state);\n            storage.setItem(key, serializedState);\n        } catch (err) {\n            console.log(err);\n        }\n    });\n\n    return [state, setState];\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}