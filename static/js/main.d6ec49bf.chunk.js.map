{"version":3,"sources":["components/Table/TableRow/ColorPicker/ColorPicker.module.css","components/Table/Table.module.css","components/Table/TableCell/TableCell.tsx","components/Button/Button.tsx","components/Table/TableRow/ColorPicker/ColorPicker.tsx","components/Table/TableRow/TableRow.tsx","components/Table/Table.tsx","App.tsx","utils/customHooks.tsx","serviceWorker.ts","index.tsx","components/Button/Button.module.css","components/Table/TableRow/TableRow.module.css"],"names":["module","exports","TableCell","id","rowName","changeRow","isColor","dataAttr","useState","nameActive","setNameActive","cellName","setCellName","onClick","onBlur","data-column","autoFocus","value","onChange","e","currentTarget","type","Button","onHandler","btnName","btnText","btnColor","styles","add","del","className","btn","ColorPicker","showColorPicker","setShowColorPicker","style","display","justifyContent","backgroundColor","color","picker","onChangeComplete","hex","TableRow","index","name","deleteRow","tableRowDown","tableRowUp","actionCell","filter","marginRight","Table","table","tableRows","map","tr","key","data","App","initialValue","storage","localStorage","storageValue","getItem","setItem","JSON","stringify","parse","err","console","log","state","setState","useEffect","serializedState","useStorage","setTable","swap","arr","start","end","result","Map","_","set","Array","from","values","rowId","row","dataName","dataValue","newIndex","push","shift","length","unshift","pop","Math","max","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d6ec49bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"picker\":\"ColorPicker_picker__Mf1Kb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__3cVv6\"};","import React, {ChangeEvent, useState} from \"react\";\n\ntype PropsType = {\n    id: number\n    rowName: string\n    changeRow: (id: number, dataName: string, dataValue: string) => void\n    isColor?: boolean\n    dataAttr: string\n};\n\nexport const TableCell = ({id, rowName, changeRow, isColor, dataAttr}: PropsType) => {\n    const [nameActive, setNameActive] = useState(false);\n    const [cellName, setCellName] = useState(rowName);\n\n    const onNameActiveClick = () => setNameActive(true);\n    const onNameInActiveClick = () => {\n        setNameActive(false);\n        changeRow(id, dataAttr, cellName);\n    };\n\n    const onChangeRow = (e: ChangeEvent<HTMLInputElement>) => setCellName(e.currentTarget.value);\n\n    return (\n        <td\n            onClick={onNameActiveClick}\n            onBlur={onNameInActiveClick}\n            data-column={dataAttr}\n        >\n            {\n                nameActive\n                    ?\n                    <input\n                        autoFocus\n                        value={cellName}\n                        onChange={onChangeRow}\n                        type={isColor ? 'color' : 'text'}\n                    />\n                    : <span>{cellName}</span>\n            }\n        </td>\n    );\n};","import React from \"react\";\nimport styles from './Button.module.css';\n\ntype PropsType = {\n    onHandler: () => void\n    btnName: string\n    btnText: string\n};\n\nexport const Button = ({onHandler, btnName, btnText}: PropsType) => {\n    const btnColor = btnName === 'add'\n        ? `${styles.add}`\n        : `${styles.del}`;\n\n    return (\n        <button\n            onClick={onHandler}\n            className={`${styles.btn} ${btnColor}`}\n        >{btnText}</button>\n    );\n};","import React, {useState} from 'react';\nimport {ChromePicker, ColorResult} from 'react-color';\nimport styles from './ColorPicker.module.css';\n\ntype PropsType = {\n    rowName: string\n    changeRow: (id: number, dataName: string, dataValue: string) => void\n    id: number\n    dataAttr: string\n};\n\nexport const ColorPicker = ({rowName, id, dataAttr, changeRow}: PropsType) => {\n    const [showColorPicker, setShowColorPicker] = useState(false);\n\n    const handleChangeComplete = (color: ColorResult) => {\n        changeRow(id, dataAttr, color.hex);\n    };\n\n    return (\n        <td>\n            <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                <span onClick={() => setShowColorPicker(!showColorPicker)}>{rowName}</span>\n                {showColorPicker && <button style={{backgroundColor: 'red', color: '#fff'}}\n                                            onClick={() => setShowColorPicker(false)}>x</button>}\n            </div>\n\n            {showColorPicker && <ChromePicker\n                className={styles.picker}\n                color={rowName}\n                onChangeComplete={handleChangeComplete}\n            />}\n        </td>\n    );\n};","import React from \"react\";\nimport {TableCell} from \"../TableCell/TableCell\";\nimport styles from './TableRow.module.css';\nimport {Button} from \"../../Button/Button\";\nimport {ColorPicker} from \"./ColorPicker/ColorPicker\";\n\ntype PropsType = {\n    id: number\n    name: string\n    type: string\n    color: string\n    deleteRow: (id: number) => void\n    changeRow: (id: number, dataName: string, dataValue: string) => void\n    tableRowDown: (index: number) => void\n    tableRowUp: (index: number) => void\n    index: number\n};\n\nexport const TableRow = ({id, index, name, type, color, deleteRow, changeRow, tableRowDown, tableRowUp}: PropsType) => {\n    const onDeleteRow = () => deleteRow(id);\n    const onUpBtnClick = () => tableRowUp(index);\n    const onDownBtnClick = () => tableRowDown(index);\n\n    return (\n        <>\n            <tr>\n                <td data-column={'id'}>{id}</td>\n                <TableCell id={id} rowName={name} changeRow={changeRow} dataAttr={'name'}/>\n                <TableCell id={id} rowName={type} changeRow={changeRow} dataAttr={'type'}/>\n                {/*<TableCell id={id} rowName={color} isColor changeRow={changeRow} dataAttr={'color'}/>*/}\n                <ColorPicker rowName={color} changeRow={changeRow} id={id} dataAttr={'color'} />\n                <td data-column={'delete'}>\n                    <div className={styles.actionCell}>\n                        <div className={styles.filter}>\n                            <span style={{marginRight: '10px'}} onClick={onUpBtnClick}>&uarr;</span>\n                            <span onClick={onDownBtnClick}>&darr;</span>\n                        </div>\n                        <div>\n                            <Button\n                                onHandler={onDeleteRow}\n                                btnName={'del'}\n                                btnText={'Del row'}\n                            />\n                        </div>\n                    </div>\n                </td>\n            </tr>\n        </>\n    );\n};","import React from \"react\";\nimport {TableRow} from \"./TableRow/TableRow\";\nimport {TableRowsType} from \"../../utils/types\";\nimport styles from './Table.module.css';\n\ntype PropsType = {\n    table: Array<TableRowsType>\n    deleteRow: (id: number) => void\n    changeRow: (id: number, dataName: string, dataValue: string) => void\n    tableRowDown: (index: number) => void\n    tableRowUp: (index: number) => void\n};\n\nexport const Table = ({table, deleteRow, changeRow, tableRowDown, tableRowUp}: PropsType) => {\n    const tableRows = table.map((tr, index) =>\n        <TableRow\n            id={tr.id}\n            index={index}\n            name={tr.name}\n            type={tr.type}\n            color={tr.color}\n            deleteRow={deleteRow}\n            changeRow={changeRow}\n            tableRowDown={tableRowDown}\n            tableRowUp={tableRowUp}\n            key={tr.id}\n        />\n    );\n\n    return (\n        <>\n            <table className={styles.table}>\n                <thead>\n                    <tr>\n                        <th>id</th>\n                        <th>name</th>\n                        <th>type</th>\n                        <th>color</th>\n                        <th>actions / delete</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tableRows}\n                </tbody>\n            </table>\n        </>\n    );\n};","import React from 'react';\nimport './App.css';\nimport {Table} from \"./components/Table/Table\";\nimport {useStorage} from \"./utils/customHooks\";\nimport {TableRowsType} from \"./utils/types\";\nimport {Button} from \"./components/Button/Button\";\n\nconst data = [\n    {id: 2, name: 'name2', type: 'main2', color: '#cccccc'},\n    {id: 1, name: 'name1', type: 'main', color: '#f4f4f4'},\n    {id: 3, name: 'name3', type: 'main3', color: '#000000'},\n];\n\nconst App = () => {\n    const [table, setTable] = useStorage('table', data);\n\n    const addRowHandler = () => setTable([...table, {\n        id: table.length ? Math.max(...table.map((row: TableRowsType) => row.id)) + 1 : 1,\n        name: 'nameNewTest',\n        type: 'mainNewTest',\n        color: '#000000'\n    }]);\n\n    const deleteRowHandler = (rowId: number) => {\n        setTable(table.filter((row: TableRowsType) => row.id !== rowId));\n    };\n\n    const changeRowHandler = (id: number, dataName: string, dataValue: string) => {\n        setTable(table.map((tr: TableRowsType) => {\n            if (tr.id === id) {\n                return {...tr, [dataName]: dataValue}\n            }\n\n            return tr;\n        }));\n    };\n\n    const swap = (arr = [], start = 0, end = 0) => {\n        let result = new Map();\n\n        arr.map((_, index) => {\n            switch (index) {\n                case start:\n                    return result.set(index, arr[end]);\n                case end:\n                    return result.set(index, arr[start]);\n                default:\n                    return result.set(index, arr[index]);\n            }\n        });\n\n        return Array.from(result.values());\n    };\n\n    const tableRowDown = (index: number) => {\n        let newIndex = index + 1;\n\n        if (index === table.length - 1) {\n            table.unshift(table.pop());\n            setTable([...table]);\n        } else {\n            setTable(swap(table, index, newIndex));\n        }\n    };\n\n    const tableRowUp = (index: number) => {\n        let newIndex = index - 1;\n\n        if (newIndex < 0) {\n            table.push(table.shift());\n            setTable([...table]);\n        } else {\n            setTable(swap(table, index, newIndex));\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <Table\n                table={table}\n                deleteRow={deleteRowHandler}\n                changeRow={changeRowHandler}\n                tableRowUp={tableRowUp}\n                tableRowDown={tableRowDown}\n            />\n            <Button\n                onHandler={addRowHandler}\n                btnName={'add'}\n                btnText={'Add'}\n            />\n        </div>\n    );\n}\n\nexport default App;","import {useEffect, useState} from 'react';\n\nexport const useStorage = (key: string, initialValue: any, storage = localStorage) => {\n    const [state, setState] = useState(() => {\n        try {\n            const storageValue = storage.getItem(key);\n\n            if (typeof storageValue !== 'string') {\n                storage.setItem(key, JSON.stringify(initialValue));\n                return initialValue;\n            }\n\n            return JSON.parse(storageValue || 'null');\n        } catch (err) {\n            console.log(err);\n            return initialValue;\n        }\n    });\n\n    useEffect(() => {\n        try {\n            const serializedState = JSON.stringify(state);\n            storage.setItem(key, serializedState);\n        } catch (err) {\n            console.log(err);\n        }\n    });\n\n    return [state, setState];\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"del\":\"Button_del__3EaLH\",\"add\":\"Button_add__21Klw\",\"btn\":\"Button_btn__3xaJM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"TableRow_filter__VKQo5\",\"actionCell\":\"TableRow_actionCell__w8fcf\"};"],"sourceRoot":""}